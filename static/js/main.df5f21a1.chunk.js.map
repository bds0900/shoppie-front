{"version":3,"sources":["Components/Result.tsx","Components/Results.tsx","Components/Search.tsx","Components/Nomination.tsx","Components/Nominations.tsx","Components/Share.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Result","props","style","display","margin","search","Title","Year","id","imdbID","onClick","add","Results","className","tag","searches","map","Search","onChange","handleSearch","Nomination","nomination","remove","Nominations","nominations","share","sns","url","Share","item","key","href","window","location","target","App","useState","setTag","fetchedData","setFetchedData","setNomination","banner","setBanner","useCookies","cookies","setCookie","useEffect","updateButton","handleCookie","length","addBanner","user","button","document","getElementById","disabled","path","setTimeout","event","value","console","log","axios","get","then","result","data","Response","undefined","catch","error","arr","push","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","CookiesProvider","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yQAQe,SAASA,EAAOC,GAC3B,OACI,6BACI,yBAAKC,MAAO,CAACC,QAAQ,eAAgBC,OAAO,SACvCH,EAAMI,OAAOC,MADlB,IAC0BL,EAAMI,OAAOE,KADvC,KAGA,4BACIC,GAAIP,EAAMI,OAAOI,OACjBC,QAAS,kBAAKT,EAAMU,IAAIV,EAAMI,OAAOI,UAFzC,aCFG,SAASG,EAAQX,GAC5B,IAAMU,EAAI,SAACH,GACPP,EAAMU,IAAIH,IAGd,OACI,yBAAKK,UAAU,kBACf,4CAAkBZ,EAAMa,IAAxB,KAGIb,EAAMc,UACNd,EAAMc,SAASC,KAAI,SAAAX,GAAM,OACrB,yBAAKQ,UAAU,aACX,kBAACb,EAAD,CAAQK,OAAQA,EAAQM,IAAKA,SClBlC,SAASM,EAAOhB,GAE3B,OACI,6BACA,2CACA,2BAAOiB,SAAUjB,EAAMkB,gBCJhB,SAASC,EAAWnB,GAC/B,OACI,6BACI,yBAAKC,MAAO,CAACC,QAAQ,eAAgBC,OAAO,SACvCH,EAAMoB,WAAWf,MADtB,IAC8BL,EAAMoB,WAAWd,KAD/C,KAGA,4BAAQG,QAAS,kBAAKT,EAAMqB,OAAOrB,EAAMoB,WAAWZ,UAApD,WCJG,SAASc,EAAYtB,GAChC,IAAMqB,EAAO,SAACd,GACVP,EAAMqB,OAAOd,IAEjB,OACI,yBAAKK,UAAU,kBACM,OAApBZ,EAAMuB,YAAmB,0CAAoB,KAE1CvB,EAAMuB,aACNvB,EAAMuB,YAAYR,KAAI,SAAAK,GAAU,OAC5B,yBAAKR,UAAU,aACX,kBAACO,EAAD,CAAYC,WAAYA,EAAYC,OAAQA,S,oBCT1DG,EAAa,CACf,CAACC,IAAI,UAAUC,IAAI,mCAAmCb,IAAI,SAC1D,CAACY,IAAI,WAAWC,IAAI,gDAAgDb,IAAI,SACxE,CAACY,IAAI,WAAWC,IAAI,uDAAuDb,IAAI,UAEpE,SAASc,EAAT,GAEX,OAFoD,eAGhD,yBAAKf,UAAU,wBACf,4BACKY,EAAMT,KAAI,SAAAa,GAAI,OACX,wBAAIC,IAAKD,EAAKH,IAAKb,UAAU,mBAC7B,uBACAkB,KAAI,UAAKF,EAAKF,KAAV,OAAgBK,OAAOC,SAASF,MACpCG,OAAO,SACPrB,UAAS,aAAQgB,EAAKH,MAClB,uBAAGb,UAAS,aAAQgB,EAAKH,OACzB,8BAAQG,EAAKf,YCiIlBqB,MAhJf,WAAgB,IAAD,EACMC,mBAAS,IADf,mBACNtB,EADM,KACFuB,EADE,OAEsBD,qBAFtB,mBAENE,EAFM,KAEMC,EAFN,OAGoBH,qBAHpB,mBAGNf,EAHM,KAGKmB,EAHL,OAIYJ,oBAAkB,GAJ9B,mBAINK,EAJM,KAICC,EAJD,OAKgBC,YAAW,CAAC,SAL5B,mBAKNC,EALM,KAKGC,EALH,KAMbC,qBAAU,WACRC,IACAC,IACwB,KAAX,OAAV3B,QAAU,IAAVA,OAAA,EAAAA,EAAY4B,SACbC,MAEF,CAAC7B,EAAWiB,IAEdQ,qBAAU,WACU,cAAfF,EAAQO,MACTX,EAAcI,EAAQO,QAGxB,IAGF,IAAMJ,EAAa,WACN,OAAXT,QAAW,IAAXA,KAAatB,KAAI,SAAAa,GACf,IAAMuB,EAASC,SAASC,eAAezB,EAAKpB,QAChC,OAAT2C,IAEEA,EAA6BG,UAAW,MAIrC,OAAVlC,QAAU,IAAVA,KAAYL,KAAI,SAAAa,GACd,IAAMuB,EAASC,SAASC,eAAezB,EAAKpB,QAChC,OAAT2C,IAEEA,EAA6BG,UAAW,OAM3CP,EAAa,WAEjBH,EAAU,OAAQxB,EAAY,CAC5BmC,KAAM,OAsDJN,EAAU,WACdR,GAAU,GACVe,YAAW,WACTf,GAAU,KACT,MAIL,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAAlB,gBAGA,kBAACI,EAAD,CAAQE,aA/DO,SAACuC,GAChBrB,EAAOqB,EAAMxB,OAAOyB,OACpBC,QAAQC,IAAIH,EAAMxB,OAAOyB,OACzBG,IAAMC,IAtDA,8CAsDsBL,EAAMxB,OAAOyB,OACtCK,MAAK,SAAAC,GACwB,SAAvBA,EAAOC,KAAKC,UAEbP,QAAQC,IAAII,EAAOC,MACnB3B,EAAe0B,EAAOC,KAAKjD,SAE3BsB,OAAe6B,MAIpBC,OAAM,SAAAC,GAAK,OAAIV,QAAQC,IAAIS,cAoDdF,IAAd9B,EACA,KACA,kBAAC1B,EAAD,CACEG,SAAUuB,EACV3B,IArDY,SAACH,QACH4D,IAAb/C,EACU,OAAXiB,QAAW,IAAXA,KAAatB,KAAI,SAAAkD,GACf,GAAGA,EAAKzD,SAASD,EAAG,CAClB,IAAI+D,EAAI,YAAIlD,GACZkD,EAAIC,KAAKN,GACT1B,EAAc+B,OAIP,OAAXjC,QAAW,IAAXA,KAAatB,KAAI,SAAAkD,GACZA,EAAKzD,SAASD,GACfgC,EAAc,CAAC0B,QA0CfpD,IAAKA,SAIMsD,IAAb/C,EACA,KACA,kBAACE,EAAD,CACEC,YAAaH,EACbC,OA5Ce,SAACd,GACtB,QAAgB4D,IAAb/C,EACH,CACE,IAAIkD,EAAIlD,EAAWoD,QAAO,SAAAP,GAAI,OAAEA,EAAKzD,SAASD,KAC9CoD,QAAQC,IAAIU,GACI,IAAbA,EAAItB,OAELT,OAAc4B,GAEd5B,EAAc+B,YAuCAH,IAAd9B,EACA,KACA,kBAACV,EAAD,MAIF,yBAAKf,UAAS,iBAAY4B,EAAO,iBAAiB,KAAlD,2BC3IciC,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QAIF3B,SAASC,eAAe,SD6HpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLV,QAAQU,MAAMA,EAAMgB,c","file":"static/js/main.df5f21a1.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\r\nimport { SearchType } from './Interfaces'\r\n\r\ninterface Props {\r\n    search:SearchType\r\n    add:any\r\n}\r\n\r\nexport default function Result(props: Props): ReactElement {\r\n    return (\r\n        <div>\r\n            <div style={{display:\"inline-block\", margin:\"10px\"}}>\r\n                {props.search.Title}({props.search.Year})\r\n            </div>\r\n            <button \r\n                id={props.search.imdbID} \r\n                onClick={()=>(props.add(props.search.imdbID))}>\r\n                Nominate\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\nimport Result from './Result'\r\nimport { SearchType } from './Interfaces'\r\nimport Search from './Search'\r\n\r\ninterface Props {\r\n    searches:SearchType[]\r\n    add:any\r\n    tag:string\r\n}\r\n\r\n\r\nexport default function Results(props:Props): ReactElement {\r\n    const add=(id:string)=>{\r\n        props.add(id)\r\n        \r\n    }\r\n    return (\r\n        <div className=\"flex-container\">\r\n        <h2>Results for \"{props.tag}\"</h2>\r\n        {\r\n            \r\n            props.searches&&\r\n            props.searches.map(search=>(\r\n                <div className=\"flex-item\">\r\n                    <Result search={search} add={add}/>\r\n                </div>\r\n            ))\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement,useState } from 'react'\r\n\r\n\r\ninterface Props {\r\n    handleSearch:any\r\n}\r\n\r\nexport default function Search(props:Props): ReactElement {\r\n    \r\n    return (\r\n        <div>\r\n        <h3>Movie Title</h3>\r\n        <input onChange={props.handleSearch}></input>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport { SearchType } from './Interfaces'\r\n\r\ninterface Props {\r\n    nomination:SearchType\r\n    remove:any\r\n}\r\n\r\nexport default function Nomination(props: Props): ReactElement {\r\n    return (\r\n        <div>\r\n            <div style={{display:\"inline-block\", margin:\"10px\"}}>\r\n                {props.nomination.Title}({props.nomination.Year})\r\n            </div>\r\n            <button onClick={()=>(props.remove(props.nomination.imdbID))}>\r\n                remove\r\n            </button>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport Nomination from './Nomination'\r\nimport { SearchType } from './Interfaces'\r\nimport Result from './Result'\r\n\r\ninterface Props {\r\n    nominations:SearchType[]\r\n    remove:any\r\n}\r\n\r\nexport default function Nominations(props: Props): ReactElement {\r\n    const remove=(id:string)=>{\r\n        props.remove(id)\r\n    }\r\n    return (\r\n        <div className=\"flex-container\">\r\n        {props.nominations!==null?<h2>Nomination</h2>:null}\r\n        {\r\n            props.nominations&&\r\n            props.nominations.map(nomination=>(\r\n                <div className=\"flex-item\">\r\n                    <Nomination nomination={nomination} remove={remove}/>\r\n                    \r\n                </div>\r\n            ))\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement } from 'react'\r\n\r\ninterface Props {\r\n    \r\n}\r\ninterface Link{\r\n    sns:string;\r\n    url:string;\r\n    tag:string;\r\n\r\n}\r\n\r\nconst share:Link[]=[\r\n    {sns:\"twitter\",url:\"https://twitter.com/home?status=\",tag:\"tweet\"},\r\n    {sns:\"facebook\",url:\"https://www.facebook.com/sharer/sharer.php?u=\",tag:\"share\"},\r\n    {sns:\"linkedin\",url:\"https://www.linkedin.com/shareArticle?mini=true&url=\",tag:\"share\"}\r\n]\r\nexport default function Share({}: Props): ReactElement {\r\n    \r\n    return (\r\n        <div className=\"share-link-container\">\r\n        <ul>\r\n            {share.map(item=>(\r\n                <li key={item.sns} className=\"share-link-item\">\r\n                <a \r\n                href={`${item.url}${window.location.href}`} \r\n                target=\"_blank\" \r\n                className={`fa ${item.sns}`}>\r\n                    <i className={`fa-${item.sns}`}></i>\r\n                    <span >{item.tag}</span>\r\n                </a>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios'\r\nimport Results from './Components/Results';\r\nimport Search from './Components/Search';\r\nimport { SearchType,ResponseType } from './Components/Interfaces';\r\nimport Nominations from './Components/Nominations';\r\nimport { useCookies } from \"react-cookie\";\r\nimport Share from './Components/Share';\r\n\r\n\r\nconst API = 'https://www.omdbapi.com/?apikey=72a5618d&s='\r\n\r\n\r\nfunction App() {\r\n  const [tag,setTag]=useState(\"\");\r\n  const [fetchedData,setFetchedData]=useState<SearchType[]>();\r\n  const [nomination,setNomination]=useState<SearchType[]>();\r\n  const [banner,setBanner]=useState<boolean>(false);\r\n  const [cookies, setCookie] = useCookies([\"user\"]);\r\n  useEffect(()=>{\r\n    updateButton()\r\n    handleCookie()\r\n    if(nomination?.length===5){\r\n      addBanner()\r\n    }\r\n  },[nomination,fetchedData])\r\n\r\n  useEffect(()=>{\r\n    if(cookies.user!==\"undefined\"){\r\n      setNomination(cookies.user)\r\n    }\r\n\r\n  },[])\r\n\r\n\r\n  const updateButton=()=>{\r\n    fetchedData?.map(item=>{\r\n      const button = document.getElementById(item.imdbID)\r\n      if(button!==null)\r\n      {\r\n          (button as HTMLButtonElement).disabled = false;\r\n      }\r\n\r\n    })\r\n    nomination?.map(item=>{\r\n      const button = document.getElementById(item.imdbID)\r\n      if(button!==null)\r\n      {\r\n          (button as HTMLButtonElement).disabled = true;\r\n      }\r\n\r\n    })\r\n  }\r\n  \r\n  const handleCookie=()=>{\r\n\r\n    setCookie(\"user\", nomination, {\r\n      path: \"/\"\r\n    });\r\n  }\r\n\r\n  const handleSearch=(event: React.ChangeEvent<HTMLInputElement>)=>{\r\n      setTag(event.target.value)\r\n      console.log(event.target.value);\r\n      axios.get<ResponseType>(API+event.target.value)\r\n        .then(result =>{\r\n            if(result.data.Response===\"True\")\r\n            {\r\n              console.log(result.data)\r\n              setFetchedData(result.data.Search)\r\n            } else{\r\n              setFetchedData(undefined)\r\n            }\r\n            \r\n        })\r\n        .catch(error => console.log(error));\r\n  }\r\n\r\n  const addNomination=(id:string)=>{\r\n    if(nomination!==undefined){\r\n      fetchedData?.map(data=>{\r\n        if(data.imdbID===id){\r\n          let arr=[...nomination];\r\n          arr.push(data)\r\n          setNomination(arr);\r\n        }\r\n      })\r\n    }else{\r\n      fetchedData?.map(data=>{\r\n        if(data.imdbID===id){\r\n          setNomination([data])\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  const removeNomination=(id:string)=>{\r\n    if(nomination!==undefined)\r\n    {\r\n      let arr=nomination.filter(data=>data.imdbID!==id)\r\n      console.log(arr);\r\n      if(arr.length===0)\r\n      {\r\n        setNomination(undefined)\r\n      }else{\r\n        setNomination(arr);\r\n      }\r\n    }\r\n\r\n  }\r\n  \r\n  const addBanner=()=>{\r\n    setBanner(true)\r\n    setTimeout(() => {\r\n      setBanner(false)\r\n    }, 3000);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        The Shoppies\r\n      </header>\r\n      <Search handleSearch={handleSearch}/>\r\n\r\n      {\r\n        fetchedData===undefined?\r\n        null:\r\n        <Results \r\n          searches={fetchedData} \r\n          add={addNomination}\r\n          tag={tag}\r\n        />\r\n      }\r\n      {\r\n        nomination===undefined?\r\n        null:\r\n        <Nominations \r\n          nominations={nomination} \r\n          remove={removeNomination}\r\n        />\r\n      }\r\n      {\r\n        fetchedData===undefined?\r\n        null:\r\n        <Share/>\r\n      }\r\n      \r\n      \r\n      <div className={`banner ${banner?\"banner--hidden\":\"\"}`}>\r\n        You got 5 nominations\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from \"react-cookie\";\nimport Share from './Components/Share';\nReactDOM.render(\n  <React.StrictMode>\n  <CookiesProvider>\n    <App />\n    \n  </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}